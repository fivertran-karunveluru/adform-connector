name: Deploy Adform Connector

on:
  push:
    branches:
      - main

jobs:
  test-and-deploy-fivetran-connector:
    runs-on: ubuntu-latest
    environment: Fivetran

    env:
      PYTHON_VERSION: '3.11'
      WORKING_DIRECTORY: '${{ github.workspace }}'
      CONNECTOR_NAME: 'Adform'
      CONFIG_FILE: 'configuration.json'
      EXCLUDED_DEPENDENCIES: '^requests\\b'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install core dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fivetran-connector-sdk black flake8 faker

      - name: Install requirements.txt
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          if [ -e requirements.txt ]; then
            echo '{"level":"INFO", "message": "Pip installing requirements.txt", "message-origin": "connector_sdk"}'
            pip install -r <(grep -v '${{ env.EXCLUDED_DEPENDENCIES }}' requirements.txt)
          fi

      - name: Code Quality - Black Formatting Check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          black --check --diff .

      - name: Code Quality - Flake8 Linting
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          flake8 --max-line-length=88 --extend-ignore=E203,W503 .

      - name: Run Unit Tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          python test_connector.py

      - name: Run Mock Integration Tests
        working-directory: ${{ env.WORKING_DIRECTORY }}/faker_mock
        run: |
          python test_connector_with_mock.py

      - name: Create Configuration File
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "{\"client_id\": \"${{ secrets.ADFORM_CLIENT_ID || '' }}\", 
            \"client_secret\": \"${{ secrets.ADFORM_CLIENT_SECRET || '' }}\",
            \"refresh_token\": \"${{ secrets.ADFORM_REFRESH_TOKEN || '' }}\",
            \"adform_base_url\": \"${{ vars.ADFORM_BASE_URL || 'https://api.adform.com' }}\",
            \"initial_sync_days\": \"${{ vars.INITIAL_SYNC_DAYS || '90' }}\",
            \"page_size\": \"${{ vars.PAGE_SIZE || '100' }}\",
            \"request_timeout_seconds\": \"${{ vars.REQUEST_TIMEOUT_SECONDS || '30' }}\",
            \"retry_attempts\": \"${{ vars.RETRY_ATTEMPTS || '3' }}\",
            \"enable_incremental_sync\": \"${{ vars.ENABLE_INCREMENTAL_SYNC || 'true' }}\",
            \"enable_campaigns_sync\": \"${{ vars.ENABLE_CAMPAIGNS_SYNC || 'true' }}\",
            \"enable_lineitems_sync\": \"${{ vars.ENABLE_LINEITEMS_SYNC || 'true' }}\",
            \"enable_creatives_sync\": \"${{ vars.ENABLE_CREATIVES_SYNC || 'true' }}\",
            \"enable_debug_logging\": \"${{ vars.ENABLE_DEBUG_LOGGING || 'false' }}\",
            \"use_mock\": \"${{ vars.ADFORM_USE_MOCK || 'true' }}\" }" > ${{ env.CONFIG_FILE }}

      - name: Validate Configuration
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          python -c "
          import json
          from connector import parse_configuration, validate_configuration
          with open('${{ env.CONFIG_FILE }}', 'r') as f:
              cfg = parse_configuration(json.load(f))
          validate_configuration(cfg)
          print('Configuration validation passed')
          "

      - name: Deploy Fivetran Connector
        if: ${{ vars.DEPLOY_ENABLED == 'true' }}
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          FIVETRAN_API_KEY: ${{ secrets.FIVETRAN_API_KEY }}
          FIVETRAN_DESTINATION: ${{ vars.FIVETRAN_DEV_DESTINATION }}
          FIVETRAN_CONNECTION: ${{ vars.ADFORM_DEV_CONNECTION }}
        run: |
          echo "Deploying ${{ env.CONNECTOR_NAME }} connector"
          fivetran deploy --api-key $FIVETRAN_API_KEY --destination $FIVETRAN_DESTINATION --connection $FIVETRAN_CONNECTION --configuration ${{ env.CONFIG_FILE }} --python-version ${{ env.PYTHON_VERSION }} --force
          echo "Successfully deployed ${{ env.CONNECTOR_NAME }} connector"

